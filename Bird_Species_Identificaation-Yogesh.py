# -*- coding: utf-8 -*-
"""Bird Species Identificaation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oG2dzycLm9ZL5zAFakYTGLmX-to9mZP2
"""

import os 
os.environ['KAGGLE_USERNAME'] = "yogeshkhandare56"
os.environ['KAGGLE_KEY'] = "7788f9b761a1a8f81219c7927e26a42c"

!kaggle datasets download -d gpiosenka/100-bird-species

!unzip 100-bird-species.zip

import matplotlib.pyplot as plt
import pathlib, os, random
import numpy as np
import pandas as pd
import tensorflow as tf
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Activation, BatchNormalization, Dropout , GlobalAveragePooling2D
from keras.preprocessing.image import ImageDataGenerator
from keras import Sequential
import keras
from keras.callbacks import Callback, EarlyStopping,ModelCheckpoint

import os
import random
import shutil

# Specify the directory paths
train_folder_path = "/content/train"
test_folder_path = "/content/test"
val_folder_path = "/content/valid"

# Get a list of all folder names in the train directory
folders = [folder for folder in os.listdir(train_folder_path) if os.path.isdir(os.path.join(train_folder_path, folder))]

# Shuffle the list of folder names
random.shuffle(folders)

# Save the first 500 folder names in a text file
with open("folder_names.txt", "w") as file:
    for folder_name in folders[:500]:
        file.write(folder_name + "\n")

# Read the folder names from the text file
with open("folder_names.txt", "r") as file:
    folder_names = file.read().splitlines()

# Delete the folders from the train, test, and valid directories
for folder_name in folder_names:
    # Delete the folder from the train directory
    train_folder = os.path.join(train_folder_path, folder_name)
    if os.path.exists(train_folder):
        shutil.rmtree(train_folder)
        print(f"Deleted folder from train: {train_folder}")
    else:
        print(f"Folder not found in train: {train_folder}")

    # Delete the folder from the test directory
    test_folder = os.path.join(test_folder_path, folder_name)
    if os.path.exists(test_folder):
        shutil.rmtree(test_folder)
        print(f"Deleted folder from test: {test_folder}")
    else:
        print(f"Folder not found in test: {test_folder}")

    # Delete the folder from the valid directory
    val_folder = os.path.join(val_folder_path, folder_name)
    if os.path.exists(val_folder):
        shutil.rmtree(val_folder)
        print(f"Deleted folder from valid: {val_folder}")
    else:
        print(f"Folder not found in valid: {val_folder}")

import os
import shutil

# Specify the folder name to be deleted
folder_name = "PARAKETT AUKLET"
val_folder_path = "/content/valid"

val_folder = os.path.join(val_folder_path, folder_name)
if os.path.exists(val_folder):
    shutil.rmtree(val_folder)
    print(f"Deleted folder from val: {val_folder}")
else:
    print(f"Folder not found in val: {val_folder}")

train="/content/train/"
no_birds_classes = os.listdir(train)
len(no_birds_classes)

data = pathlib.Path("/content/train")
BirdClasses = np.array(sorted([item.name for item in data.glob("*")]))
print(BirdClasses)

def view_random_image(target_dir, target_class):
  
  target_folder = target_dir + target_class

  random_image = random.sample(os.listdir(target_folder), 1)

  img = plt.imread(target_folder + "/" + random_image[0] )
  plt.imshow(img)
  plt.title(target_class)
  plt.axis("off")

  
  return img

img = view_random_image(train,'BLACK BAZA')

fig, axes = plt.subplots(nrows=4, ncols=4, figsize=(10, 10),
                        subplot_kw={'xticks': [], 'yticks': []})

random_index = np.random.randint(0 , len(BirdClasses)-1 , 16)

for i, ax in enumerate(axes.flat):
    ax.imshow(view_random_image(train,BirdClasses[random_index[i]]))
    ax.set_title(BirdClasses[random_index[i]])

train_data = "/content/train/"
test_data = "/content/test/"
val_data = "/content/valid/"

from keras.applications.mobilenet_v2 import MobileNetV2

train_gen = ImageDataGenerator(rescale=1./255)
test_gen = ImageDataGenerator(rescale=1./255)
val_gen = ImageDataGenerator(rescale=1./255)

data_train = train_gen.flow_from_directory( train_data , target_size=(224,224) , batch_size=32 , class_mode = "categorical" ,shuffle=True )

data_val = val_gen.flow_from_directory( val_data , target_size=(224,224) , batch_size=32 , class_mode = "categorical" , shuffle=True )

data_test = test_gen.flow_from_directory( test_data , target_size=(224,224) , batch_size=32 , class_mode = "categorical" ,shuffle=False )

mobilenet = MobileNetV2( include_top=False , weights="imagenet" , input_shape=(224,224,3))

mobilenet.summary()

mobilenet.trainable=True

for layer in mobilenet.layers[:-20]:
  layer.trainable=False

Model = Sequential([
    mobilenet,
    GlobalAveragePooling2D(),
    BatchNormalization(),
    Dense(256,activation='relu'),
    BatchNormalization(),
    Dense(25,activation='softmax')
])

Model.summary()

Model.compile( optimizer="adam", loss="categorical_crossentropy" , metrics=["accuracy"] )

callbacks = [EarlyStopping(monitor='val_accuracy' , patience=10 , restore_best_weights=True)]

history = Model.fit(data_train,epochs=15 , batch_size=32 ,steps_per_epoch = len(data_train)
,callbacks=callbacks ,workers=10,use_multiprocessing=True, validation_data=data_val,validation_steps = len(data_val))

results = Model.evaluate(data_test, verbose=0)


print("Test Loss: {:.5f}".format(results[0]))
print("Test Accuracy: {:.2f}%".format(results[1] * 100))

pred = Model.predict(data_test)
pred = np.argmax(pred,axis=1)

index =1

img , label = data_test[index]
label = data_test.labels[index]
print(f"True Label: {BirdClasses[label]}")
print(f"Predicted Label: {BirdClasses[pred[index]]}")  
plt.imshow(img[0])
plt.show()

from PIL import Image
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
image_path = "/content/valid/FIORDLAND PENGUIN/1.jpg"
image_width = 224
image_height = 224
img = image.load_img(image_path, target_size=(image_width, image_height))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0) 
true_label = 'FIORDLAND PENGUIN/'
img_array = img_array / 255.0 
predictions = Model.predict(img_array)
predicted_label = np.argmax(predictions, axis=1)
plt.imshow(img)
plt.axis("off")
plt.title(f"True Label: {true_label} \nPredicted Label: {BirdClasses[predicted_label[0]]}")
plt.show()

Model.save("BirdSpecies.h5")

Model.save("BirdSpecies.h5")

def plot_curves(history):

  loss = history.history["loss"]
  val_loss = history.history["val_loss"]

  accuracy = history.history["accuracy"]
  val_accuracy = history.history["val_accuracy"]

  epochs = range(len(history.history["loss"]))

  #plot loss
  plt.plot(epochs, loss, label = "training_loss")
  plt.plot(epochs, val_loss, label = "val_loss")
  plt.title("Loss")
  plt.xlabel("epochs")
  plt.legend()

  #plot accuracy
  plt.figure() 
  plt.plot(epochs, accuracy, label = "training_accuracy")
  plt.plot(epochs, val_accuracy, label = "val_accuracy")
  plt.title("Accuracy")
  plt.xlabel("epochs")
  plt.legend()
  plt.show()
  plt.tight_layout()

plot_curves(history)

from google.colab import drive
drive.mount('/content/drive')

import zipfile

def zip_folders(folders, zip_filename):
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for folder in folders:
            for root, dirs, files in os.walk(folder):
                for file in files:
                    zipf.write(os.path.join(root, file))

folders_to_zip = ['test', 'train', 'valid']
zip_filename = '/content/drive/MyDrive/zipped_folders.zip'

zip_folders(folders_to_zip, zip_filename)

